version: '3.8'

services:
  # Infrastructure Services
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: meme_coin_automation
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Core Microservices
  social-monitor:
    build: 
      context: ./services/social-monitor
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - REDIS_URL=redis://redis:6379
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET}
      - TWITTER_ACCESS_TOKEN=${TWITTER_ACCESS_TOKEN}
      - TWITTER_ACCESS_TOKEN_SECRET=${TWITTER_ACCESS_TOKEN_SECRET}
      - RAPIDAPI_KEY=${RAPIDAPI_KEY}
      - DAILY_BUDGET=${DAILY_BUDGET:-25}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  sentiment-ai:
    build:
      context: ./services/sentiment-ai
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=gpt-3.5-turbo
      - DAILY_AI_BUDGET=${DAILY_AI_BUDGET:-10}
      - MAX_AI_BUDGET_USAGE=85
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  token-creator:
    build:
      context: ./services/token-creator
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - REDIS_URL=redis://redis:6379
      - SOLANA_NETWORK=devnet
      - SOLANA_RPC_URL=${SOLANA_RPC_URL}
      - SOLANA_PRIVATE_KEY=${SOLANA_PRIVATE_KEY}
      - MIN_TOKEN_CONFIDENCE=0.8
      - DEFAULT_TOKEN_SUPPLY=1000000000
      - DEFAULT_DECIMALS=6
      - ENABLE_PUMP_FUN=true
      - MAX_DAILY_TOKENS=10
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  website-generator:
    build:
      context: ./services/website-generator
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  trading-agent:
    build:
      context: ./services/trading-agent
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    environment:
      - REDIS_URL=redis://redis:6379
      - SOLANA_NETWORK=devnet
      - SOLANA_RPC_URL=${SOLANA_RPC_URL}
      - SOLANA_PRIVATE_KEY=${SOLANA_PRIVATE_KEY}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  cost-manager:
    build:
      context: ./services/cost-manager
      dockerfile: Dockerfile
    ports:
      - "3006:3006"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/meme_coin_automation
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: meme-coin-network
